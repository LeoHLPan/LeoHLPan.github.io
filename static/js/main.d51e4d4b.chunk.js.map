{"version":3,"sources":["assets/resume.pdf","images/me.png","components/DigitalClock.js","components/Title.js","components/App.js","components/Me.js","components/Router.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","DigitalClock","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","time","Date","_this2","update","setInterval","setState","clearInterval","react_default","a","createElement","className","toLocaleTimeString","React","Component","Title","App","goToAbout","event","props","history","push","components_DigitalClock","components_Title","title","onClick","window","open","resumepdf","Me","goBack","header","icon","src","alt","introduction","Helmet_default","me","Router","react_router_dom","react_router","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","components_Router","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,sPC+BzBC,cA5Bb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CAAEC,KAAM,IAAIC,MAFbT,mFAKM,IAAAU,EAAAP,KAElBA,KAAKQ,OAASC,YAAY,WACxBF,EAAKG,SAAS,CAAEL,KAAM,IAAIC,QACzB,oDAKHK,cAAcX,KAAKQ,yCAInB,IAAMH,EAAOL,KAAKI,MAAMC,KAExB,OACEO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,UAAKT,EAAKW,8BAvBSC,IAAMC,WCOlBC,EAND,kBACZP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,kDC0BWM,6MAxBbC,UAAY,SAAAC,GACVzB,EAAK0B,MAAMC,QAAQC,KAAK,mFAGjB,IAAAlB,EAAAP,KACP,OACEY,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACY,EAAD,MACAd,EAAAC,EAAAC,cAACa,EAAD,MACAf,EAAAC,EAAAC,cAAA,UACEC,UAAU,YACVa,MAAM,WACNC,QAAS,kBAAMtB,EAAKc,eAEtBT,EAAAC,EAAAC,cAAA,UACEC,UAAU,gBACVa,MAAM,SACNC,QAAS,kBAAMC,OAAOC,KAAKC,gBAlBnBf,IAAMC,6CCkDTe,6MA/CbC,OAAS,SAAAZ,GAGPzB,EAAK0B,MAAMC,QAAQC,KAAK,QAG1BU,OAAS,SAAAC,GACP,OACExB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKuB,IAAKD,EAAME,IAAKF,QAK3BG,aAAe,WACb,OACE3B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,mCACyBF,EAAAC,EAAAC,cAAA,WACvBF,EAAAC,EAAAC,cAAA,WAFF,8VAOqBF,EAAAC,EAAAC,cAAA,WACnBF,EAAAC,EAAAC,cAAA,sFAMC,IAAAP,EAAAP,KACP,OACEY,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC0B,EAAA3B,EAAD,KACED,EAAAC,EAAAC,cAAA,aAAQ,sCAEVF,EAAAC,EAAAC,cAAA,UAAQe,QAAS,kBAAMtB,EAAK2B,WAA5B,iBACAtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACZf,KAAKmC,OAAOM,KACZzC,KAAKuC,wBA7CCtB,IAAMC,WCURwB,EATA,kBACb9B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,KACE/B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,KACEhC,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW3B,IACjCR,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAOE,KAAK,SAASC,UAAWd,OCGlBe,QACW,cAA7BlB,OAAOmB,SAASC,UAEe,UAA7BpB,OAAOmB,SAASC,UAEhBpB,OAAOmB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAAYC,SAASC,eAAe,SD2H9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d51e4d4b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/resume.0bd41c23.pdf\";","module.exports = __webpack_public_path__ + \"static/media/me.d9af4909.png\";","import React from \"react\";\n\nclass DigitalClock extends React.Component {\n  constructor() {\n    super();\n    this.state = { time: new Date() }; // get time\n  }\n\n  componentDidMount() {\n    // Update time every second\n    this.update = setInterval(() => {\n      this.setState({ time: new Date() });\n    }, 1 * 1000);\n  }\n\n  componentWillUnmount() {\n    // delete interval on removal\n    clearInterval(this.update);\n  }\n\n  render() {\n    const time = this.state.time;\n\n    return (\n      <div className=\"digital-clock\">\n        <h2>{time.toLocaleTimeString()}</h2>\n      </div>\n    );\n  }\n}\n\nexport default DigitalClock;\n","import React from \"react\";\n//import \"../style.css\";\n\nconst Title = () => (\n  <div className=\"title\">\n    <h1>Intergral</h1>\n  </div>\n);\n\nexport default Title;\n","import React from \"react\";\nimport DigitalClock from \"./DigitalClock\";\nimport Title from \"./Title\";\nimport \"../style.css\";\nimport resumepdf from \"../assets/resume.pdf\";\n\nclass App extends React.Component {\n  goToAbout = event => {\n    this.props.history.push(\"/about\");\n  };\n\n  render() {\n    return (\n      <div className=\"app\">\n        <DigitalClock />\n        <Title />\n        <button\n          className=\"me-button\"\n          title=\"about me\"\n          onClick={() => this.goToAbout()}\n        />\n        <button\n          className=\"resume-button\"\n          title=\"resume\"\n          onClick={() => window.open(resumepdf)}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport Helmet from \"react-helmet\";\nimport me from \"./../images/me.png\";\n\nclass Me extends React.Component {\n  //   componentDidMount = () => {\n  //     document.body.style = \"background: #2c2c2c;\";\n  //   };\n\n  goBack = event => {\n    //event.preventDefault();\n\n    this.props.history.push(\"/\");\n  };\n\n  header = icon => {\n    return (\n      <div className=\"me-header\">\n        <img src={icon} alt={icon} />\n      </div>\n    );\n  };\n\n  introduction = () => {\n    return (\n      <div>\n        <p>\n          Hello! My name is Leo. <br />\n          <br />I studied Computer Science at the University of Waterloo. My\n          time there has given me the opportunity to discover and refine my\n          passion for programming. As a new graduate, I strive to design\n          applications to help people in their everyday lives. If I can give\n          someone even a single extra minute every day, it's all worth it. Every\n          difference counts. <br />\n          <br />\n        </p>\n      </div>\n    );\n  };\n\n  render() {\n    return (\n      <div>\n        <Helmet>\n          <style>{\"body {background-color: #2c2c2c;}\"}</style>\n        </Helmet>\n        <button onClick={() => this.goBack()}>Return [TEMP]</button>\n        <div className=\"about\">\n          {this.header(me)}\n          {this.introduction()}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Me;\n","import React from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport App from \"./App\";\nimport Me from \"./Me\";\n\nconst Router = () => (\n  <BrowserRouter>\n    <Switch>\n      <Route exact path=\"/\" component={App} />\n      <Route path=\"/about\" component={Me} />\n    </Switch>\n  </BrowserRouter>\n);\n\nexport default Router;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Router from \"./components/Router\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Router />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}